{"file_contents":{"AndroidProjects/gradle/libs.versions.toml":{"content":"[versions]\nagp = \"8.13.0\"\nkotlin = \"2.0.21\"\ncoreKtx = \"1.10.1\"\njunit = \"4.13.2\"\njunitVersion = \"1.1.5\"\nespressoCore = \"3.5.1\"\nappcompat = \"1.6.1\"\nmaterial = \"1.10.0\"\nactivity = \"1.8.0\"\nconstraintlayout = \"2.1.4\"\nroom = \"2.6.1\"\nlifecycle = \"2.7.0\"\ncoroutines = \"1.7.3\"\nksp = \"2.0.21-1.0.28\"\n\n[libraries]\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\nandroidx-appcompat = { group = \"androidx.appcompat\", name = \"appcompat\", version.ref = \"appcompat\" }\nmaterial = { group = \"com.google.android.material\", name = \"material\", version.ref = \"material\" }\nandroidx-activity = { group = \"androidx.activity\", name = \"activity\", version.ref = \"activity\" }\nandroidx-constraintlayout = { group = \"androidx.constraintlayout\", name = \"constraintlayout\", version.ref = \"constraintlayout\" }\nandroidx-room-runtime = { group = \"androidx.room\", name = \"room-runtime\", version.ref = \"room\" }\nandroidx-room-ktx = { group = \"androidx.room\", name = \"room-ktx\", version.ref = \"room\" }\nandroidx-room-compiler = { group = \"androidx.room\", name = \"room-compiler\", version.ref = \"room\" }\nandroidx-lifecycle-viewmodel-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-viewmodel-ktx\", version.ref = \"lifecycle\" }\nandroidx-lifecycle-livedata-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-livedata-ktx\", version.ref = \"lifecycle\" }\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycle\" }\nkotlinx-coroutines-android = { group = \"org.jetbrains.kotlinx\", name = \"kotlinx-coroutines-android\", version.ref = \"coroutines\" }\n\n[plugins]\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\nkotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\nkotlin-ksp = { id = \"com.google.devtools.ksp\", version.ref = \"ksp\" }\n\n","size_bytes":2134},"AndroidProjects/app/src/androidTest/java/com/example/musep50/ExampleInstrumentedTest.kt":{"content":"package com.example.musep50\n\nimport androidx.test.platform.app.InstrumentationRegistry\nimport androidx.test.ext.junit.runners.AndroidJUnit4\n\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport org.junit.Assert.*\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * See [testing documentation](http://d.android.com/tools/testing).\n */\n@RunWith(AndroidJUnit4::class)\nclass ExampleInstrumentedTest {\n    @Test\n    fun useAppContext() {\n        // Context of the app under test.\n        val appContext = InstrumentationRegistry.getInstrumentation().targetContext\n        assertEquals(\"com.example.musep50\", appContext.packageName)\n    }\n}","size_bytes":665},"AndroidProjects/app/src/main/java/com/example/musep50/MainActivity.kt":{"content":"\npackage com.example.musep50\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.widget.VideoView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.musep50.databinding.ActivityMainBinding\nimport com.example.musep50.ui.DashboardActivity\nimport com.example.musep50.ui.LoginActivity\n\nclass MainActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityMainBinding\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        // Toujours afficher l'écran d'intro avec vidéo à chaque lancement\n        binding = ActivityMainBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        \n        setupVideoView()\n        setupContinueButton()\n    }\n    \n    private fun setupVideoView() {\n        val videoUri = Uri.parse(\"android.resource://\" + packageName + \"/\" + R.raw.deo)\n        binding.videoView.setVideoURI(videoUri)\n        \n        // Lecture automatique en boucle\n        binding.videoView.setOnPreparedListener { mediaPlayer ->\n            mediaPlayer.isLooping = true\n            mediaPlayer.start()\n        }\n        \n        // Démarrer la vidéo\n        binding.videoView.start()\n    }\n    \n    private fun setupContinueButton() {\n        binding.btnContinue.setOnClickListener {\n            startActivity(Intent(this, LoginActivity::class.java))\n            finish()\n        }\n    }\n    \n    override fun onResume() {\n        super.onResume()\n        if (::binding.isInitialized) {\n            binding.videoView.start()\n        }\n    }\n    \n    override fun onPause() {\n        super.onPause()\n        if (::binding.isInitialized) {\n            binding.videoView.pause()\n        }\n    }\n}\n","size_bytes":1756},"AndroidProjects/app/src/test/java/com/example/musep50/ExampleUnitTest.kt":{"content":"package com.example.musep50\n\nimport org.junit.Test\n\nimport org.junit.Assert.*\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * See [testing documentation](http://d.android.com/tools/testing).\n */\nclass ExampleUnitTest {\n    @Test\n    fun addition_isCorrect() {\n        assertEquals(4, 2 + 2)\n    }\n}","size_bytes":343},"AndroidProjects/app/src/main/java/com/example/musep50/data/AppDatabase.kt":{"content":"package com.example.musep50.data\n\nimport android.content.Context\nimport androidx.room.Database\nimport androidx.room.Room\nimport androidx.room.RoomDatabase\nimport com.example.musep50.data.dao.*\nimport com.example.musep50.data.entities.*\n\n@Database(\n    entities = [\n        User::class,\n        Operation::class,\n        Paiement::class,\n        Parametre::class\n    ],\n    version = 1,\n    exportSchema = false\n)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n    abstract fun operationDao(): OperationDao\n    abstract fun paiementDao(): PaiementDao\n    abstract fun parametreDao(): ParametreDao\n\n    companion object {\n        @Volatile\n        private var INSTANCE: AppDatabase? = null\n\n        fun getDatabase(context: Context): AppDatabase {\n            return INSTANCE ?: synchronized(this) {\n                val instance = Room.databaseBuilder(\n                    context.applicationContext,\n                    AppDatabase::class.java,\n                    \"musep50_database\"\n                )\n                    .fallbackToDestructiveMigration()\n                    .build()\n                INSTANCE = instance\n                instance\n            }\n        }\n    }\n}\n","size_bytes":1212},"AndroidProjects/app/src/main/java/com/example/musep50/data/Repository.kt":{"content":"package com.example.musep50.data\n\nimport androidx.lifecycle.LiveData\nimport com.example.musep50.data.dao.*\nimport com.example.musep50.data.entities.*\n\nclass Repository(private val database: AppDatabase) {\n    \n    // User operations\n    fun getAllUsers(): LiveData<List<User>> = database.userDao().getAllUsers()\n    \n    suspend fun getUserById(id: Long): User? = database.userDao().getUserById(id)\n    \n    suspend fun getUserByEmail(email: String): User? = database.userDao().getUserByEmail(email)\n    \n    suspend fun verifyCredentials(email: String, pin: String): User? = \n        database.userDao().verifyCredentials(email, pin)\n    \n    suspend fun insertUser(user: User): Long = database.userDao().insert(user)\n    \n    suspend fun updateUser(user: User) = database.userDao().update(user)\n    \n    suspend fun updatePin(userId: Long, newPin: String) = database.userDao().updatePin(userId, newPin)\n    \n    // Operation operations\n    fun getAllOperations(): LiveData<List<Operation>> = database.operationDao().getAllOperations()\n    \n    suspend fun getOperationById(id: Long): Operation? = database.operationDao().getOperationById(id)\n    \n    fun getOperationByIdLive(id: Long): LiveData<Operation?> = database.operationDao().getOperationByIdLive(id)\n    \n    fun getActiveOperations(): LiveData<List<Operation>> = database.operationDao().getActiveOperations()\n    \n    suspend fun insertOperation(operation: Operation): Long = database.operationDao().insert(operation)\n    \n    suspend fun updateOperation(operation: Operation) = database.operationDao().update(operation)\n    \n    suspend fun deleteOperation(operation: Operation) = database.operationDao().delete(operation)\n    \n    suspend fun closeOperation(operationId: Long) = database.operationDao().closeOperation(operationId)\n    \n    // Paiement operations\n    fun getPaiementsByOperation(operationId: Long): LiveData<List<Paiement>> = \n        database.paiementDao().getPaiementsByOperation(operationId)\n    \n    fun getPaiementsWithUserByOperation(operationId: Long): LiveData<List<PaiementWithUser>> = \n        database.paiementDao().getPaiementsWithUserByOperation(operationId)\n    \n    suspend fun getTotalByOperation(operationId: Long): Double = \n        database.paiementDao().getTotalByOperation(operationId) ?: 0.0\n    \n    suspend fun getCountByOperation(operationId: Long): Int = \n        database.paiementDao().getCountByOperation(operationId)\n    \n    suspend fun insertPaiement(paiement: Paiement): Long = database.paiementDao().insert(paiement)\n    \n    suspend fun updatePaiement(paiement: Paiement) = database.paiementDao().update(paiement)\n    \n    suspend fun deletePaiement(paiement: Paiement) = database.paiementDao().delete(paiement)\n    \n    // Parametre operations\n    fun getAllParametres(): LiveData<List<Parametre>> = database.parametreDao().getAllParametres()\n    \n    suspend fun getParametre(key: String): Parametre? = database.parametreDao().getParametre(key)\n    \n    suspend fun setParametre(key: String, value: String) {\n        val existing = getParametre(key)\n        if (existing != null) {\n            database.parametreDao().updateValue(key, value)\n        } else {\n            database.parametreDao().insert(Parametre(cle = key, valeur = value))\n        }\n    }\n}\n","size_bytes":3273},"AndroidProjects/app/src/main/java/com/example/musep50/ui/DashboardActivity.kt":{"content":"package com.example.musep50.ui\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.core.widget.doOnTextChanged\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.musep50.R\nimport com.example.musep50.data.entities.Operation\nimport com.example.musep50.databinding.ActivityDashboardBinding\nimport com.example.musep50.ui.adapter.OperationAdapter\nimport com.example.musep50.viewmodel.DashboardViewModel\n\nclass DashboardActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityDashboardBinding\n    private val viewModel: DashboardViewModel by viewModels()\n    private lateinit var adapter: OperationAdapter\n    private var allOperations = listOf<Operation>()\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityDashboardBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        \n        setSupportActionBar(binding.toolbar)\n        \n        setupRecyclerView()\n        setupSearchBar()\n        setupFab()\n        observeViewModel()\n    }\n    \n    private fun setupRecyclerView() {\n        adapter = OperationAdapter { operation ->\n            val intent = Intent(this, OperationDetailsActivity::class.java)\n            intent.putExtra(\"operation_id\", operation.id)\n            startActivity(intent)\n        }\n        \n        binding.operationsRecyclerView.layoutManager = LinearLayoutManager(this)\n        binding.operationsRecyclerView.adapter = adapter\n    }\n    \n    private fun setupSearchBar() {\n        binding.searchInput.doOnTextChanged { text, _, _, _ ->\n            filterOperations(text.toString())\n        }\n    }\n    \n    private fun setupFab() {\n        binding.fabNewOperation.setOnClickListener {\n            startActivity(Intent(this, NewOperationActivity::class.java))\n        }\n    }\n    \n    private fun filterOperations(query: String) {\n        val filtered = if (query.isBlank()) {\n            allOperations\n        } else {\n            allOperations.filter {\n                it.nom.contains(query, ignoreCase = true) ||\n                it.type.contains(query, ignoreCase = true)\n            }\n        }\n        adapter.submitList(filtered)\n        updateEmptyState(filtered.isEmpty())\n    }\n    \n    private fun updateEmptyState(isEmpty: Boolean) {\n        binding.emptyStateLayout.visibility = if (isEmpty) View.VISIBLE else View.GONE\n        binding.operationsRecyclerView.visibility = if (isEmpty) View.GONE else View.VISIBLE\n    }\n    \n    private fun observeViewModel() {\n        viewModel.allOperations.observe(this) { operations ->\n            allOperations = operations\n            adapter.submitList(operations)\n            updateEmptyState(operations.isEmpty())\n            \n            viewModel.loadOperationStats(operations.map { it.id })\n        }\n        \n        viewModel.operationStats.observe(this) { stats ->\n            adapter.setOperationStats(stats)\n        }\n    }\n    \n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n        menuInflater.inflate(R.menu.dashboard_menu, menu)\n        return true\n    }\n    \n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        return when (item.itemId) {\n            R.id.action_profile -> {\n                startActivity(Intent(this, ProfileActivity::class.java))\n                true\n            }\n            R.id.action_settings -> {\n                // TODO: Open settings\n                true\n            }\n            else -> super.onOptionsItemSelected(item)\n        }\n    }\n}\n","size_bytes":3761},"AndroidProjects/app/src/main/java/com/example/musep50/ui/LoginActivity.kt":{"content":"\npackage com.example.musep50.ui\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Toast\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.musep50.R\nimport com.example.musep50.databinding.ActivityLoginBinding\nimport com.example.musep50.viewmodel.AuthViewModel\nimport com.example.musep50.viewmodel.LoginResult\n\nclass LoginActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityLoginBinding\n    private val viewModel: AuthViewModel by viewModels()\n    private var currentPin = \"\"\n    private var currentEmail = \"\"\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityLoginBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        \n        setupEmailStep()\n        setupPinStep()\n        observeViewModel()\n    }\n    \n    private fun setupPinStep() {\n        val pinButtons = listOf(\n            binding.pinKeypad.btn0,\n            binding.pinKeypad.btn1,\n            binding.pinKeypad.btn2,\n            binding.pinKeypad.btn3,\n            binding.pinKeypad.btn4,\n            binding.pinKeypad.btn5,\n            binding.pinKeypad.btn6,\n            binding.pinKeypad.btn7,\n            binding.pinKeypad.btn8,\n            binding.pinKeypad.btn9\n        )\n        \n        pinButtons.forEachIndexed { index, button ->\n            button.setOnClickListener {\n                addPinDigit(index.toString())\n            }\n        }\n        \n        binding.pinKeypad.btnDelete.setOnClickListener {\n            removePinDigit()\n        }\n        \n        binding.pinKeypad.btnBack.setOnClickListener {\n            showEmailStep()\n        }\n    }\n    \n    private fun setupEmailStep() {\n        binding.continueButton.setOnClickListener {\n            val email = binding.emailInput.text.toString()\n            if (email.isNotEmpty()) {\n                currentEmail = email\n                // Vérifier si l'utilisateur existe en tentant la connexion\n                showPinStep()\n            } else {\n                Toast.makeText(this, \"Veuillez entrer votre email\", Toast.LENGTH_SHORT).show()\n            }\n        }\n        \n        binding.registerButton.setOnClickListener {\n            startActivity(Intent(this, RegisterActivity::class.java))\n        }\n    }\n    \n    private fun addPinDigit(digit: String) {\n        if (currentPin.length < 4) {\n            currentPin += digit\n            updatePinDots()\n            \n            if (currentPin.length == 4) {\n                viewModel.login(currentEmail, currentPin)\n            }\n        }\n    }\n    \n    private fun removePinDigit() {\n        if (currentPin.isNotEmpty()) {\n            currentPin = currentPin.dropLast(1)\n            updatePinDots()\n        }\n    }\n    \n    private fun updatePinDots() {\n        val dots = listOf(\n            binding.pinDot1,\n            binding.pinDot2,\n            binding.pinDot3,\n            binding.pinDot4\n        )\n        \n        dots.forEachIndexed { index, dot ->\n            if (index < currentPin.length) {\n                dot.setBackgroundResource(R.drawable.pin_dot_filled)\n            } else {\n                dot.setBackgroundResource(R.drawable.pin_dot_empty)\n            }\n        }\n    }\n    \n    private fun showEmailStep() {\n        binding.emailInputLayout.visibility = View.VISIBLE\n        binding.pinLayout.visibility = View.GONE\n        binding.continueButton.visibility = View.VISIBLE\n        binding.registerButton.visibility = View.VISIBLE\n        binding.subtitleText.text = \"Entrez votre adresse email\"\n        currentPin = \"\"\n        updatePinDots()\n    }\n    \n    private fun showPinStep() {\n        binding.emailInputLayout.visibility = View.GONE\n        binding.pinLayout.visibility = View.VISIBLE\n        binding.continueButton.visibility = View.GONE\n        binding.registerButton.visibility = View.GONE\n        binding.subtitleText.text = \"Entrez votre code PIN\"\n    }\n    \n    private fun observeViewModel() {\n        viewModel.loginResult.observe(this) { result ->\n            when (result) {\n                is LoginResult.Success -> {\n                    val sharedPreferences = getSharedPreferences(\"musep50_prefs\", MODE_PRIVATE)\n                    sharedPreferences.edit().putLong(\"current_user_id\", result.user.id).apply()\n                    \n                    startActivity(Intent(this, DashboardActivity::class.java))\n                    finish()\n                }\n                is LoginResult.Error -> {\n                    currentPin = \"\"\n                    updatePinDots()\n                    Toast.makeText(this, result.message, Toast.LENGTH_SHORT).show()\n                }\n            }\n        }\n    }\n}\n","size_bytes":4771},"AndroidProjects/app/src/main/java/com/example/musep50/ui/NewOperationActivity.kt":{"content":"\npackage com.example.musep50.ui\n\nimport android.app.DatePickerDialog\nimport android.os.Bundle\nimport android.widget.ArrayAdapter\nimport android.widget.Toast\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.musep50.data.entities.Operation\nimport com.example.musep50.databinding.ActivityNewOperationBinding\nimport com.example.musep50.viewmodel.OperationViewModel\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nclass NewOperationActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityNewOperationBinding\n    private val viewModel: OperationViewModel by viewModels()\n    private val calendar = Calendar.getInstance()\n    private val dateFormat = SimpleDateFormat(\"dd/MM/yyyy\", Locale.FRANCE)\n    private var dateDebut: Date? = null\n    private var dateFin: Date? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityNewOperationBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        setupToolbar()\n        setupTypeDropdown()\n        setupDatePickers()\n        setupCreateButton()\n    }\n\n    private fun setupToolbar() {\n        setSupportActionBar(binding.toolbar)\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\n        binding.toolbar.setNavigationOnClickListener {\n            finish()\n        }\n    }\n\n    private fun setupTypeDropdown() {\n        val types = arrayOf(\"ADHESION\", \"COTISATION_EXCEPTIONNELLE\", \"FONDS_CAISSE\")\n        val adapter = ArrayAdapter(this, android.R.layout.simple_dropdown_item_1line, types)\n        binding.typeInput.setAdapter(adapter)\n    }\n\n    private fun setupDatePickers() {\n        binding.dateDebutInput.setOnClickListener {\n            showDatePicker { date ->\n                dateDebut = date\n                binding.dateDebutInput.setText(dateFormat.format(date))\n            }\n        }\n\n        binding.dateFinInput.setOnClickListener {\n            showDatePicker { date ->\n                dateFin = date\n                binding.dateFinInput.setText(dateFormat.format(date))\n            }\n        }\n    }\n\n    private fun showDatePicker(onDateSelected: (Date) -> Unit) {\n        val year = calendar.get(Calendar.YEAR)\n        val month = calendar.get(Calendar.MONTH)\n        val day = calendar.get(Calendar.DAY_OF_MONTH)\n\n        DatePickerDialog(this, { _, selectedYear, selectedMonth, selectedDay ->\n            calendar.set(selectedYear, selectedMonth, selectedDay)\n            onDateSelected(calendar.time)\n        }, year, month, day).show()\n    }\n\n    private fun setupCreateButton() {\n        binding.createButton.setOnClickListener {\n            val nom = binding.nomInput.text.toString()\n            val type = binding.typeInput.text.toString()\n            val montantStr = binding.montantInput.text.toString()\n\n            if (validateInputs(nom, type, montantStr)) {\n                val operation = Operation(\n                    nom = nom,\n                    type = type,\n                    montantCible = montantStr.toDouble(),\n                    dateDebut = dateDebut!!.time,\n                    dateFin = dateFin?.time,\n                    statut = \"EN_COURS\"\n                )\n\n                viewModel.insertOperation(operation)\n                Toast.makeText(this, \"Opération créée avec succès\", Toast.LENGTH_SHORT).show()\n                finish()\n            }\n        }\n    }\n\n    private fun validateInputs(nom: String, type: String, montantStr: String): Boolean {\n        if (nom.isBlank()) {\n            binding.nomInputLayout.error = \"Le nom est requis\"\n            return false\n        }\n\n        if (type.isBlank()) {\n            binding.typeInputLayout.error = \"Le type est requis\"\n            return false\n        }\n\n        if (montantStr.isBlank()) {\n            binding.montantInputLayout.error = \"Le montant est requis\"\n            return false\n        }\n\n        if (dateDebut == null) {\n            Toast.makeText(this, \"Veuillez sélectionner la date de début\", Toast.LENGTH_SHORT).show()\n            return false\n        }\n\n        if (dateFin == null) {\n            Toast.makeText(this, \"Veuillez sélectionner la date de fin\", Toast.LENGTH_SHORT).show()\n            return false\n        }\n\n        if (dateFin!!.before(dateDebut)) {\n            Toast.makeText(this, \"La date de fin doit être après la date de début\", Toast.LENGTH_SHORT).show()\n            return false\n        }\n\n        return true\n    }\n}\n","size_bytes":4494},"AndroidProjects/app/src/main/java/com/example/musep50/ui/OperationDetailsActivity.kt":{"content":"\npackage com.example.musep50.ui\n\nimport android.os.Bundle\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.widget.doOnTextChanged\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.musep50.data.entities.Paiement\nimport com.example.musep50.databinding.ActivityOperationDetailsBinding\nimport com.example.musep50.ui.adapter.PaymentAdapter\nimport com.example.musep50.viewmodel.DashboardViewModel\nimport java.text.NumberFormat\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nclass OperationDetailsActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityOperationDetailsBinding\n    private val viewModel: DashboardViewModel by viewModels()\n    private lateinit var adapter: PaymentAdapter\n    private var allPayments = listOf<Paiement>()\n    private val dateFormat = SimpleDateFormat(\"d MMM yyyy\", Locale.FRANCE)\n    private val formatter = NumberFormat.getNumberInstance(Locale.FRANCE)\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityOperationDetailsBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        val operationId = intent.getLongExtra(\"operation_id\", -1L)\n\n        setupToolbar()\n        setupRecyclerView()\n        setupSearch()\n        setupFab(operationId)\n        observeViewModel(operationId)\n    }\n\n    private fun setupToolbar() {\n        setSupportActionBar(binding.toolbar)\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\n        binding.toolbar.setNavigationOnClickListener {\n            finish()\n        }\n    }\n\n    private fun setupRecyclerView() {\n        adapter = PaymentAdapter()\n        binding.paymentsRecyclerView.layoutManager = LinearLayoutManager(this)\n        binding.paymentsRecyclerView.adapter = adapter\n    }\n\n    private fun setupSearch() {\n        binding.searchInput.doOnTextChanged { text, _, _, _ ->\n            filterPayments(text.toString())\n        }\n    }\n\n    private fun setupFab(operationId: Long) {\n        binding.fabAddPayment.setOnClickListener {\n            // TODO: Open add payment dialog\n        }\n    }\n\n    private fun filterPayments(query: String) {\n        val filtered = if (query.isBlank()) {\n            allPayments\n        } else {\n            allPayments.filter { payment ->\n                // Filter by user name when you have user data\n                true\n            }\n        }\n        adapter.submitList(filtered)\n    }\n\n    private fun observeViewModel(operationId: Long) {\n        viewModel.allOperations.observe(this) { operations ->\n            val operation = operations.find { it.id == operationId }\n            operation?.let {\n                binding.operationName.text = it.nom\n                binding.statusChip.text = it.statut\n                binding.operationDates.text = \"${dateFormat.format(it.dateDebut)} - ${dateFormat.format(it.dateFin)}\"\n                binding.montantCible.text = \"${formatter.format(it.montantCible)} FCFA\"\n            }\n        }\n\n        viewModel.operationStats.observe(this) { stats ->\n            val stat = stats[operationId]\n            stat?.let {\n                binding.montantCollecte.text = \"${formatter.format(it.montantCollecte)} FCFA\"\n                binding.montantRestant.text = \"${formatter.format(it.montantRestant)} FCFA\"\n                binding.progressBar.progress = it.pourcentage\n                binding.nombrePayeurs.text = \"${it.nombrePaiements} payeur${if (it.nombrePaiements > 1) \"s\" else \"\"}\"\n            }\n        }\n    }\n}\n","size_bytes":3575},"AndroidProjects/app/src/main/java/com/example/musep50/ui/ProfileActivity.kt":{"content":"\npackage com.example.musep50.ui\n\nimport android.content.Intent\nimport android.os.Bundle\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.musep50.databinding.ActivityProfileBinding\nimport com.example.musep50.viewmodel.AuthViewModel\n\nclass ProfileActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityProfileBinding\n    private val viewModel: AuthViewModel by viewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityProfileBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        setupToolbar()\n        loadUserProfile()\n        setupButtons()\n    }\n\n    private fun setupToolbar() {\n        setSupportActionBar(binding.toolbar)\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\n        binding.toolbar.setNavigationOnClickListener {\n            finish()\n        }\n    }\n\n    private fun loadUserProfile() {\n        val sharedPreferences = getSharedPreferences(\"musep50_prefs\", MODE_PRIVATE)\n        val userId = sharedPreferences.getLong(\"current_user_id\", -1L)\n\n        viewModel.getUserById(userId).observe(this) { user ->\n            user?.let {\n                binding.userName.text = it.nom\n                binding.userEmail.text = it.email\n            }\n        }\n    }\n\n    private fun setupButtons() {\n        binding.btnEditProfile.setOnClickListener {\n            // TODO: Open edit profile activity\n        }\n\n        binding.btnChangePin.setOnClickListener {\n            // TODO: Open change PIN dialog\n        }\n\n        binding.btnAbout.setOnClickListener {\n            // TODO: Show about dialog\n        }\n\n        binding.btnLogout.setOnClickListener {\n            val sharedPreferences = getSharedPreferences(\"musep50_prefs\", MODE_PRIVATE)\n            sharedPreferences.edit().clear().apply()\n\n            startActivity(Intent(this, LoginActivity::class.java))\n            finishAffinity()\n        }\n    }\n}\n","size_bytes":2012},"AndroidProjects/app/src/main/java/com/example/musep50/ui/RegisterActivity.kt":{"content":"\npackage com.example.musep50.ui\n\nimport android.os.Bundle\nimport android.widget.Toast\nimport androidx.activity.viewModels\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.musep50.databinding.ActivityRegisterBinding\nimport com.example.musep50.viewmodel.AuthViewModel\nimport com.example.musep50.viewmodel.RegisterResult\n\nclass RegisterActivity : AppCompatActivity() {\n    private lateinit var binding: ActivityRegisterBinding\n    private val viewModel: AuthViewModel by viewModels()\n    \n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        binding = ActivityRegisterBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        \n        setupUI()\n        observeViewModel()\n    }\n    \n    private fun setupUI() {\n        binding.registerButton.setOnClickListener {\n            val nom = binding.nomInput.text.toString()\n            val email = binding.emailInput.text.toString()\n            val telephone = binding.telephoneInput.text?.toString()\n            val organisation = binding.organisationInput.text?.toString()\n            val pin = binding.pinInput.text.toString()\n            \n            if (validateInputs(nom, email, telephone, organisation, pin)) {\n                viewModel.register(nom, email, telephone, organisation, pin)\n            }\n        }\n        \n        binding.loginButton.setOnClickListener {\n            finish()\n        }\n    }\n    \n    private fun validateInputs(nom: String, email: String, telephone: String?, organisation: String?, pin: String): Boolean {\n        if (nom.isBlank() || email.isBlank() || pin.isBlank()) {\n            Toast.makeText(this, \"Veuillez remplir tous les champs obligatoires\", Toast.LENGTH_SHORT).show()\n            return false\n        }\n        \n        if (pin.length != 4 || !pin.all { it.isDigit() }) {\n            Toast.makeText(this, \"Le code PIN doit être composé de 4 chiffres\", Toast.LENGTH_SHORT).show()\n            return false\n        }\n        \n        return true\n    }\n    \n    private fun observeViewModel() {\n        viewModel.registerResult.observe(this) { result ->\n            when (result) {\n                is RegisterResult.Success -> {\n                    Toast.makeText(this, \"Inscription réussie\", Toast.LENGTH_SHORT).show()\n                    finish()\n                }\n                is RegisterResult.Error -> {\n                    Toast.makeText(this, result.message, Toast.LENGTH_SHORT).show()\n                }\n            }\n        }\n    }\n}\n","size_bytes":2530},"AndroidProjects/app/src/main/java/com/example/musep50/viewmodel/AuthViewModel.kt":{"content":"package com.example.musep50.viewmodel\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.viewModelScope\nimport com.example.musep50.data.AppDatabase\nimport com.example.musep50.data.Repository\nimport com.example.musep50.data.entities.User\nimport kotlinx.coroutines.launch\n\nclass AuthViewModel(application: Application) : AndroidViewModel(application) {\n    private val repository: Repository = Repository(AppDatabase.getDatabase(application))\n\n    private val _loginResult = MutableLiveData<LoginResult>()\n    val loginResult: LiveData<LoginResult> = _loginResult\n\n    private val _registerResult = MutableLiveData<RegisterResult>()\n    val registerResult: LiveData<RegisterResult> = _registerResult\n\n    fun login(email: String, pin: String) {\n        viewModelScope.launch {\n            try {\n                val user = repository.verifyCredentials(email, pin)\n                if (user != null) {\n                    _loginResult.value = LoginResult.Success(user)\n                } else {\n                    _loginResult.value = LoginResult.Error(\"Email ou PIN incorrect\")\n                }\n            } catch (e: Exception) {\n                _loginResult.value = LoginResult.Error(\"Erreur de connexion: ${e.message}\")\n            }\n        }\n    }\n\n    fun register(nom: String, email: String, telephone: String?, organisation: String?, pin: String) {\n        viewModelScope.launch {\n            try {\n                val existingUser = repository.getUserByEmail(email)\n                if (existingUser != null) {\n                    _registerResult.value = RegisterResult.Error(\"Un compte avec cet email existe déjà\")\n                    return@launch\n                }\n\n                val user = User(\n                    nom = nom,\n                    email = email,\n                    telephone = telephone,\n                    organisation = organisation,\n                    pin = pin\n                )\n                val userId = repository.insertUser(user)\n                val createdUser = repository.getUserById(userId)\n                _registerResult.value = RegisterResult.Success(createdUser!!)\n            } catch (e: Exception) {\n                _registerResult.value = RegisterResult.Error(\"Erreur lors de la création du compte: ${e.message}\")\n            }\n        }\n    }\n\n    fun getUserById(userId: Long): LiveData<User?> {\n        val result = MutableLiveData<User?>()\n        viewModelScope.launch {\n            result.value = repository.getUserById(userId)\n        }\n        return result\n    }\n}\n\nsealed class LoginResult {\n    data class Success(val user: User) : LoginResult()\n    data class Error(val message: String) : LoginResult()\n}\n\nsealed class RegisterResult {\n    data class Success(val user: User) : RegisterResult()\n    data class Error(val message: String) : RegisterResult()\n}","size_bytes":2950},"AndroidProjects/app/src/main/java/com/example/musep50/viewmodel/DashboardViewModel.kt":{"content":"package com.example.musep50.viewmodel\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.viewModelScope\nimport com.example.musep50.data.AppDatabase\nimport com.example.musep50.data.Repository\nimport com.example.musep50.data.entities.Operation\nimport kotlinx.coroutines.launch\n\nclass DashboardViewModel(application: Application) : AndroidViewModel(application) {\n    private val repository: Repository = Repository(AppDatabase.getDatabase(application))\n    \n    val allOperations: LiveData<List<Operation>> = repository.getAllOperations()\n    \n    private val _operationStats = MutableLiveData<Map<Long, OperationStats>>()\n    val operationStats: LiveData<Map<Long, OperationStats>> = _operationStats\n    \n    fun loadOperationStats(operationIds: List<Long>) {\n        viewModelScope.launch {\n            val stats = mutableMapOf<Long, OperationStats>()\n            operationIds.forEach { id ->\n                val total = repository.getTotalByOperation(id)\n                val count = repository.getCountByOperation(id)\n                val operation = repository.getOperationById(id)\n                operation?.let {\n                    stats[id] = OperationStats(\n                        montantCollecte = total,\n                        nombrePaiements = count,\n                        montantCible = it.montantCible\n                    )\n                }\n            }\n            _operationStats.value = stats\n        }\n    }\n}\n\ndata class OperationStats(\n    val montantCollecte: Double,\n    val nombrePaiements: Int,\n    val montantCible: Double\n) {\n    val montantRestant: Double\n        get() = montantCible - montantCollecte\n    \n    val pourcentage: Int\n        get() = if (montantCible > 0) ((montantCollecte / montantCible) * 100).toInt() else 0\n}\n","size_bytes":1886},"AndroidProjects/app/src/main/java/com/example/musep50/viewmodel/OperationViewModel.kt":{"content":"\npackage com.example.musep50.viewmodel\n\nimport android.app.Application\nimport androidx.lifecycle.AndroidViewModel\nimport androidx.lifecycle.viewModelScope\nimport com.example.musep50.data.AppDatabase\nimport com.example.musep50.data.Repository\nimport com.example.musep50.data.entities.Operation\nimport kotlinx.coroutines.launch\n\nclass OperationViewModel(application: Application) : AndroidViewModel(application) {\n    private val repository: Repository = Repository(AppDatabase.getDatabase(application))\n\n    fun insertOperation(operation: Operation) {\n        viewModelScope.launch {\n            repository.insertOperation(operation)\n        }\n    }\n\n    fun updateOperation(operation: Operation) {\n        viewModelScope.launch {\n            repository.updateOperation(operation)\n        }\n    }\n\n    fun deleteOperation(operation: Operation) {\n        viewModelScope.launch {\n            repository.deleteOperation(operation)\n        }\n    }\n}\n","size_bytes":945},"AndroidProjects/app/src/main/java/com/example/musep50/data/dao/OperationDao.kt":{"content":"package com.example.musep50.data.dao\n\nimport androidx.lifecycle.LiveData\nimport androidx.room.*\nimport com.example.musep50.data.entities.Operation\n\n@Dao\ninterface OperationDao {\n    @Query(\"SELECT * FROM operations ORDER BY createdAt DESC\")\n    fun getAllOperations(): LiveData<List<Operation>>\n    \n    @Query(\"SELECT * FROM operations WHERE id = :id\")\n    suspend fun getOperationById(id: Long): Operation?\n    \n    @Query(\"SELECT * FROM operations WHERE id = :id\")\n    fun getOperationByIdLive(id: Long): LiveData<Operation?>\n    \n    @Query(\"SELECT * FROM operations WHERE statut = 'En cours' ORDER BY createdAt DESC\")\n    fun getActiveOperations(): LiveData<List<Operation>>\n    \n    @Query(\"SELECT * FROM operations WHERE type = :type ORDER BY createdAt DESC\")\n    fun getOperationsByType(type: String): LiveData<List<Operation>>\n    \n    @Insert(onConflict = OnConflictStrategy.ABORT)\n    suspend fun insert(operation: Operation): Long\n    \n    @Update\n    suspend fun update(operation: Operation)\n    \n    @Delete\n    suspend fun delete(operation: Operation)\n    \n    @Query(\"UPDATE operations SET statut = 'Clôturé' WHERE id = :operationId\")\n    suspend fun closeOperation(operationId: Long)\n}\n","size_bytes":1205},"AndroidProjects/app/src/main/java/com/example/musep50/data/dao/PaiementDao.kt":{"content":"package com.example.musep50.data.dao\n\nimport androidx.lifecycle.LiveData\nimport androidx.room.*\nimport com.example.musep50.data.entities.Paiement\n\n@Dao\ninterface PaiementDao {\n    @Query(\"SELECT * FROM paiements WHERE operationId = :operationId ORDER BY datePaiement DESC\")\n    fun getPaiementsByOperation(operationId: Long): LiveData<List<Paiement>>\n    \n    @Query(\"SELECT * FROM paiements WHERE userId = :userId ORDER BY datePaiement DESC\")\n    fun getPaiementsByUser(userId: Long): LiveData<List<Paiement>>\n    \n    @Query(\"SELECT * FROM paiements WHERE id = :id\")\n    suspend fun getPaiementById(id: Long): Paiement?\n    \n    @Query(\"SELECT SUM(montant) FROM paiements WHERE operationId = :operationId\")\n    suspend fun getTotalByOperation(operationId: Long): Double?\n    \n    @Query(\"SELECT COUNT(*) FROM paiements WHERE operationId = :operationId\")\n    suspend fun getCountByOperation(operationId: Long): Int\n    \n    @Query(\"\"\"\n        SELECT paiements.*, users.nom as payerName, users.email as payerEmail \n        FROM paiements \n        INNER JOIN users ON paiements.userId = users.id \n        WHERE paiements.operationId = :operationId \n        ORDER BY paiements.datePaiement DESC\n    \"\"\")\n    fun getPaiementsWithUserByOperation(operationId: Long): LiveData<List<PaiementWithUser>>\n    \n    @Insert(onConflict = OnConflictStrategy.ABORT)\n    suspend fun insert(paiement: Paiement): Long\n    \n    @Update\n    suspend fun update(paiement: Paiement)\n    \n    @Delete\n    suspend fun delete(paiement: Paiement)\n}\n\ndata class PaiementWithUser(\n    @Embedded val paiement: Paiement,\n    val payerName: String,\n    val payerEmail: String\n)\n","size_bytes":1646},"AndroidProjects/app/src/main/java/com/example/musep50/data/dao/ParametreDao.kt":{"content":"package com.example.musep50.data.dao\n\nimport androidx.lifecycle.LiveData\nimport androidx.room.*\nimport com.example.musep50.data.entities.Parametre\n\n@Dao\ninterface ParametreDao {\n    @Query(\"SELECT * FROM parametres\")\n    fun getAllParametres(): LiveData<List<Parametre>>\n    \n    @Query(\"SELECT * FROM parametres WHERE cle = :key\")\n    suspend fun getParametre(key: String): Parametre?\n    \n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    suspend fun insert(parametre: Parametre)\n    \n    @Query(\"UPDATE parametres SET valeur = :value, updatedAt = :timestamp WHERE cle = :key\")\n    suspend fun updateValue(key: String, value: String, timestamp: Long = System.currentTimeMillis())\n    \n    @Delete\n    suspend fun delete(parametre: Parametre)\n}\n","size_bytes":753},"AndroidProjects/app/src/main/java/com/example/musep50/data/dao/UserDao.kt":{"content":"package com.example.musep50.data.dao\n\nimport androidx.lifecycle.LiveData\nimport androidx.room.*\nimport com.example.musep50.data.entities.User\n\n@Dao\ninterface UserDao {\n    @Query(\"SELECT * FROM users\")\n    fun getAllUsers(): LiveData<List<User>>\n    \n    @Query(\"SELECT * FROM users WHERE id = :id\")\n    suspend fun getUserById(id: Long): User?\n    \n    @Query(\"SELECT * FROM users WHERE email = :email\")\n    suspend fun getUserByEmail(email: String): User?\n    \n    @Query(\"SELECT * FROM users WHERE email = :email AND pin = :pin\")\n    suspend fun verifyCredentials(email: String, pin: String): User?\n    \n    @Insert(onConflict = OnConflictStrategy.ABORT)\n    suspend fun insert(user: User): Long\n    \n    @Update\n    suspend fun update(user: User)\n    \n    @Delete\n    suspend fun delete(user: User)\n    \n    @Query(\"UPDATE users SET pin = :newPin WHERE id = :userId\")\n    suspend fun updatePin(userId: Long, newPin: String)\n}\n","size_bytes":930},"AndroidProjects/app/src/main/java/com/example/musep50/data/entities/Operation.kt":{"content":"package com.example.musep50.data.entities\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"operations\")\ndata class Operation(\n    @PrimaryKey(autoGenerate = true)\n    val id: Long = 0,\n    val nom: String,\n    val type: String, // ADHESION, COTISATION_EXCEPTIONNELLE, FONDS_CAISSE\n    val montantCible: Double,\n    val dateDebut: Long,\n    val dateFin: Long? = null,\n    val statut: String = \"En cours\", // \"En cours\", \"Terminé\", \"Clôturé\"\n    val description: String? = null,\n    val createdAt: Long = System.currentTimeMillis()\n)\n","size_bytes":569},"AndroidProjects/app/src/main/java/com/example/musep50/data/entities/Paiement.kt":{"content":"package com.example.musep50.data.entities\n\nimport androidx.room.Entity\nimport androidx.room.ForeignKey\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(\n    tableName = \"paiements\",\n    foreignKeys = [\n        ForeignKey(\n            entity = Operation::class,\n            parentColumns = [\"id\"],\n            childColumns = [\"operationId\"],\n            onDelete = ForeignKey.CASCADE\n        ),\n        ForeignKey(\n            entity = User::class,\n            parentColumns = [\"id\"],\n            childColumns = [\"userId\"],\n            onDelete = ForeignKey.CASCADE\n        )\n    ],\n    indices = [\n        Index(\"operationId\"),\n        Index(\"userId\")\n    ]\n)\ndata class Paiement(\n    @PrimaryKey(autoGenerate = true)\n    val id: Long = 0,\n    val operationId: Long,\n    val userId: Long,\n    val montant: Double,\n    val montantDu: Double? = null,\n    val methodePaiement: String, // \"Espèces\", \"Mobile Money\", \"Virement\", \"Autre\"\n    val statut: String = \"Validé\", // \"Validé\", \"En attente\", \"Annulé\"\n    val commentaire: String? = null,\n    val referenceRecu: String? = null,\n    val datePaiement: Long = System.currentTimeMillis(),\n    val createdAt: Long = System.currentTimeMillis()\n)\n","size_bytes":1214},"AndroidProjects/app/src/main/java/com/example/musep50/data/entities/Parametre.kt":{"content":"package com.example.musep50.data.entities\n\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(\n    tableName = \"parametres\",\n    indices = [Index(value = [\"cle\"], unique = true)]\n)\ndata class Parametre(\n    @PrimaryKey(autoGenerate = true)\n    val id: Long = 0,\n    val cle: String,\n    val valeur: String,\n    val updatedAt: Long = System.currentTimeMillis()\n)\n","size_bytes":407},"AndroidProjects/app/src/main/java/com/example/musep50/data/entities/User.kt":{"content":"package com.example.musep50.data.entities\n\nimport androidx.room.Entity\nimport androidx.room.Index\nimport androidx.room.PrimaryKey\n\n@Entity(\n    tableName = \"users\",\n    indices = [Index(value = [\"email\"], unique = true)]\n)\ndata class User(\n    @PrimaryKey(autoGenerate = true)\n    val id: Long = 0,\n    val nom: String,\n    val email: String,\n    val telephone: String? = null,\n    val organisation: String? = null,\n    val role: String = \"Membre\",\n    val pin: String,\n    val createdAt: Long = System.currentTimeMillis()\n)\n","size_bytes":525},"AndroidProjects/app/src/main/java/com/example/musep50/ui/adapter/OperationAdapter.kt":{"content":"package com.example.musep50.ui.adapter\n\nimport android.view.LayoutInflater\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.ListAdapter\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.musep50.R\nimport com.example.musep50.data.entities.Operation\nimport com.example.musep50.databinding.ItemOperationBinding\nimport com.example.musep50.viewmodel.OperationStats\nimport java.text.NumberFormat\nimport java.util.Locale\n\nclass OperationAdapter(\n    private val onItemClick: (Operation) -> Unit\n) : ListAdapter<Operation, OperationAdapter.OperationViewHolder>(OperationDiffCallback()) {\n    \n    private var operationStats = mapOf<Long, OperationStats>()\n    \n    fun setOperationStats(stats: Map<Long, OperationStats>) {\n        operationStats = stats\n        notifyDataSetChanged()\n    }\n    \n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): OperationViewHolder {\n        val binding = ItemOperationBinding.inflate(\n            LayoutInflater.from(parent.context),\n            parent,\n            false\n        )\n        return OperationViewHolder(binding)\n    }\n    \n    override fun onBindViewHolder(holder: OperationViewHolder, position: Int) {\n        holder.bind(getItem(position), operationStats[getItem(position).id])\n    }\n    \n    inner class OperationViewHolder(\n        private val binding: ItemOperationBinding\n    ) : RecyclerView.ViewHolder(binding.root) {\n        \n        fun bind(operation: Operation, stats: OperationStats?) {\n            binding.operationName.text = operation.nom\n            binding.operationType.text = operation.type\n            binding.statusChip.text = operation.statut\n            \n            stats?.let {\n                val formatter = NumberFormat.getNumberInstance(Locale.FRANCE)\n                binding.montantCollecte.text = \"${formatter.format(it.montantCollecte)} FCFA\"\n                binding.montantRestant.text = \"${formatter.format(it.montantRestant)} FCFA\"\n                binding.nombrePayeurs.text = it.nombrePaiements.toString()\n                binding.progressBar.progress = it.pourcentage\n            } ?: run {\n                binding.montantCollecte.text = \"0 FCFA\"\n                binding.montantRestant.text = \"${NumberFormat.getNumberInstance(Locale.FRANCE).format(operation.montantCible)} FCFA\"\n                binding.nombrePayeurs.text = \"0\"\n                binding.progressBar.progress = 0\n            }\n            \n            binding.root.setOnClickListener {\n                onItemClick(operation)\n            }\n        }\n    }\n}\n\nclass OperationDiffCallback : DiffUtil.ItemCallback<Operation>() {\n    override fun areItemsTheSame(oldItem: Operation, newItem: Operation): Boolean {\n        return oldItem.id == newItem.id\n    }\n    \n    override fun areContentsTheSame(oldItem: Operation, newItem: Operation): Boolean {\n        return oldItem == newItem\n    }\n}\n","size_bytes":2932},"AndroidProjects/app/src/main/java/com/example/musep50/ui/adapter/PaymentAdapter.kt":{"content":"\npackage com.example.musep50.ui.adapter\n\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.DiffUtil\nimport androidx.recyclerview.widget.ListAdapter\nimport androidx.recyclerview.widget.RecyclerView\nimport com.example.musep50.data.entities.Paiement\nimport com.example.musep50.databinding.ItemPaymentBinding\nimport java.text.NumberFormat\nimport java.text.SimpleDateFormat\nimport java.util.*\n\nclass PaymentAdapter : ListAdapter<Paiement, PaymentAdapter.PaymentViewHolder>(PaymentDiffCallback()) {\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PaymentViewHolder {\n        val binding = ItemPaymentBinding.inflate(\n            LayoutInflater.from(parent.context),\n            parent,\n            false\n        )\n        return PaymentViewHolder(binding)\n    }\n\n    override fun onBindViewHolder(holder: PaymentViewHolder, position: Int) {\n        holder.bind(getItem(position))\n    }\n\n    class PaymentViewHolder(\n        private val binding: ItemPaymentBinding\n    ) : RecyclerView.ViewHolder(binding.root) {\n\n        private val dateFormat = SimpleDateFormat(\"d MMM yyyy\", Locale.FRANCE)\n        private val formatter = NumberFormat.getNumberInstance(Locale.FRANCE)\n\n        fun bind(paiement: Paiement) {\n            // TODO: Load user name from userId\n            binding.payerName.text = \"Utilisateur #${paiement.userId}\"\n            binding.montant.text = \"${formatter.format(paiement.montant)} FCFA\"\n            binding.datePaiement.text = dateFormat.format(paiement.datePaiement)\n            binding.methode.text = paiement.methodePaiement\n\n            if (paiement.commentaire.isNullOrBlank()) {\n                binding.commentaire.visibility = View.GONE\n            } else {\n                binding.commentaire.visibility = View.VISIBLE\n                binding.commentaire.text = paiement.commentaire\n            }\n        }\n    }\n}\n\nclass PaymentDiffCallback : DiffUtil.ItemCallback<Paiement>() {\n    override fun areItemsTheSame(oldItem: Paiement, newItem: Paiement): Boolean {\n        return oldItem.id == newItem.id\n    }\n\n    override fun areContentsTheSame(oldItem: Paiement, newItem: Paiement): Boolean {\n        return oldItem == newItem\n    }\n}\n","size_bytes":2260},"replit.md":{"content":"# Android Project - MUSEP50\n\n## Overview\nThis is a native Android application written in Kotlin for financial operations and transaction tracking (appears to be for a microfinance institution). The app includes:\n- User authentication (login/register)\n- Operations management\n- Payment tracking\n- Dashboard with financial data\n- Profile management\n\n## Project Structure\n- **Build System**: Gradle with Kotlin DSL\n- **Language**: Kotlin\n- **Architecture**: MVVM pattern with Room database\n- **Key Libraries**:\n  - Room (database)\n  - Lifecycle components\n  - Coroutines\n  - Material Design components\n\n## Important Note\n**This project cannot run on Replit** because it is a native Android application that requires:\n- Android SDK\n- Android emulator or physical device\n- Android Studio or similar IDE\n\nReplit does not support native Android development. Replit only supports React Native/Expo for mobile development.\n\n## Development Environment\nTo develop this app, you need:\n1. Download Android Studio\n2. Open this project in Android Studio\n3. Build and run on an emulator or connected Android device\n\n## Project Status\n- Import completed on October 05, 2025\n- Project files verified and intact\n- **XML Build Errors Fixed**: Corrected 4 layout XML files that had blank lines before the XML declaration:\n  - `item_payment.xml`\n  - `activity_new_operation.xml`\n  - `activity_operation_details.xml`\n  - `activity_profile.xml`\n- Project should now build successfully in Android Studio\n","size_bytes":1479}},"version":1}